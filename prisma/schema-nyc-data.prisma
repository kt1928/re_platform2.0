// NYC Open Data Tables Schema
// This file is for reference - add these models to your main schema.prisma

model NYCPropertySale {
  id                String    @id @default(uuid()) @db.Uuid
  borough           Int
  neighborhood      String?   @db.VarChar(255)
  buildingClassName String?   @map("building_class_name") @db.VarChar(255)
  taxClassAtSale    String?   @map("tax_class_at_sale") @db.VarChar(10)
  block             Int
  lot               Int
  easement          String?   @db.VarChar(10)
  buildingClassAtSale String? @map("building_class_at_sale") @db.VarChar(10)
  address           String?   @db.VarChar(255)
  apartmentNumber   String?   @map("apartment_number") @db.VarChar(50)
  zipCode           String?   @map("zip_code") @db.VarChar(10)
  residentialUnits  Int?      @map("residential_units")
  commercialUnits   Int?      @map("commercial_units")
  totalUnits        Int?      @map("total_units")
  landSquareFeet    Int?      @map("land_square_feet")
  grossSquareFeet   Int?      @map("gross_square_feet")
  yearBuilt         Int?      @map("year_built")
  taxClassAtTime    String?   @map("tax_class_at_time") @db.VarChar(10)
  buildingClassAtTime String? @map("building_class_at_time") @db.VarChar(10)
  salePrice         Decimal?  @map("sale_price") @db.Decimal(12, 2)
  saleDate          DateTime? @map("sale_date") @db.Date
  dataSourceId      String?   @map("data_source_id") @db.VarChar(50)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@unique([borough, block, lot, saleDate])
  @@index([zipCode])
  @@index([saleDate])
  @@index([borough, block, lot])
  @@map("nyc_property_sales")
}

model NYCPropertyValuation {
  id                    String    @id @default(uuid()) @db.Uuid
  borough               String?   @db.VarChar(50)
  block                 Int
  lot                   Int
  ownerName             String?   @map("owner_name") @db.VarChar(255)
  propertyAddress       String?   @map("property_address") @db.VarChar(255)
  taxClass              String?   @map("tax_class") @db.VarChar(10)
  taxRate               Decimal?  @map("tax_rate") @db.Decimal(5, 4)
  assessedValue         Decimal?  @map("assessed_value") @db.Decimal(12, 2)
  marketValue           Decimal?  @map("market_value") @db.Decimal(12, 2)
  taxableValue          Decimal?  @map("taxable_value") @db.Decimal(12, 2)
  exemptionValue        Decimal?  @map("exemption_value") @db.Decimal(12, 2)
  annualPropertyTax     Decimal?  @map("annual_property_tax") @db.Decimal(10, 2)
  dataYear              Int       @map("data_year")
  dataSourceId          String?   @map("data_source_id") @db.VarChar(50)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@unique([borough, block, lot, dataYear])
  @@index([borough, block, lot])
  @@map("nyc_property_valuations")
}

model NYCHousingViolation {
  id                String    @id @default(uuid()) @db.Uuid
  violationId       String    @unique @map("violation_id") @db.VarChar(50)
  buildingId        String?   @map("building_id") @db.VarChar(50)
  registrationId    String?   @map("registration_id") @db.VarChar(50)
  borough           String?   @db.VarChar(50)
  houseNumber       String?   @map("house_number") @db.VarChar(50)
  streetName        String?   @map("street_name") @db.VarChar(255)
  postcode          String?   @db.VarChar(10)
  apartment         String?   @db.VarChar(50)
  story             String?   @db.VarChar(50)
  block             Int?
  lot               Int?
  class             String?   @db.VarChar(10)
  inspectionDate    DateTime? @map("inspection_date") @db.Date
  approvedDate      DateTime? @map("approved_date") @db.Date
  originalCertifyByDate DateTime? @map("original_certify_by_date") @db.Date
  originalCorrectByDate DateTime? @map("original_correct_by_date") @db.Date
  newCertifyByDate  DateTime? @map("new_certify_by_date") @db.Date
  newCorrectByDate  DateTime? @map("new_correct_by_date") @db.Date
  certifiedDate     DateTime? @map("certified_date") @db.Date
  orderNumber       String?   @map("order_number") @db.VarChar(50)
  novDescription    String?   @map("nov_description") @db.Text
  novIssuedDate     DateTime? @map("nov_issued_date") @db.Date
  currentStatus     String?   @map("current_status") @db.VarChar(50)
  dataSourceId      String?   @map("data_source_id") @db.VarChar(50)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@index([borough, block, lot])
  @@index([inspectionDate])
  @@index([currentStatus])
  @@map("nyc_housing_violations")
}

model NYCDataSyncLog {
  id              String   @id @default(uuid()) @db.Uuid
  datasetId       String   @map("dataset_id") @db.VarChar(50)
  datasetName     String   @map("dataset_name") @db.VarChar(255)
  syncType        String   @map("sync_type") @db.VarChar(50) // 'full' or 'incremental'
  recordsProcessed Int     @map("records_processed")
  recordsAdded    Int      @map("records_added")
  recordsUpdated  Int      @map("records_updated")
  recordsFailed   Int      @map("records_failed")
  startTime       DateTime @map("start_time") @db.Timestamptz(6)
  endTime         DateTime @map("end_time") @db.Timestamptz(6)
  status          String   @db.VarChar(50) // 'success', 'partial', 'failed'
  errorMessage    String?  @map("error_message") @db.Text
  lastRecordDate  DateTime? @map("last_record_date") @db.Timestamptz(6)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  
  @@index([datasetId, startTime])
  @@map("nyc_data_sync_logs")
}